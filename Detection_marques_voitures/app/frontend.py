import streamlit as st
import requests
from PIL import Image
import io

# Styles CSS pour am√©liorer l'apparence des onglets et du contenu
# Styles CSS pour am√©liorer l'apparence des onglets et du contenu
st.markdown("""
<style>
    .big-font {
        font-size:20px !important;
        font-weight:bold;
        color: #4CAF50; /* Couleur verte pour une emphase positive */
    }
    .image-upload {
        margin: 10px 0;
        padding: 10px;
        border: 2px solid #0066CC; /* Bleu vif pour am√©liorer la visibilit√© */
        border-radius: 5px;
        background-color: #f0f0f0; /* Couleur de fond plus douce pour l'≈ìil */
    }
    .stButton>button {
        color: #fff;
        background-color: #0066CC;
        border-radius: 5px;
        border: none;
        padding: 10px 24px;
        font-size: 16px;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Configuration du titre de la page
st.title('Pr√©diction de Marque de Voiture')

# Configuration de la barre lat√©rale pour les param√®tres ou les instructions
st.sidebar.header("Param√®tres de l'Image")
uploaded_file = st.sidebar.file_uploader("Choisissez une image...", type=["jpg", "jpeg", "png"], help="T√©l√©chargez une image de voiture ici.")

# Utilisation de st.tabs pour ajouter des onglets
tabs = st.tabs(["üöó Pr√©diction", "‚ÑπÔ∏è √Ä propos"])

# Onglet de pr√©diction
with tabs[0]:
    st.markdown("""
    <div style='font-size:16px;'>Ce prototype permet de pr√©dire la marque d'une voiture √† partir d‚Äôune image. Veuillez t√©l√©charger une image de voiture ci-dessous et le mod√®le pr√©dira sa marque et son mod√®le.</div>
    """, unsafe_allow_html=True)

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        # Convertir l'image en RGB si n√©cessaire
        if image.mode == 'RGBA':
            image = image.convert('RGB')
        st.image(image, caption='Image t√©l√©charg√©e', use_column_width=True)
        st.markdown('<p class="big-font">Classifying...</p>', unsafe_allow_html=True)

        # Pr√©paration des donn√©es de l'image pour l'envoi par requ√™te POST
        buffer = io.BytesIO()
        image.save(buffer, format="JPEG")
        byte_data = buffer.getvalue()

        # Envoi de la requ√™te POST √† l'API FastAPI
        url = 'http://127.0.0.1:8000/predict'  # Utilisation de l'adresse IP explicite
        files = {'file': ('image.jpeg', byte_data, 'image/jpeg')}
        
        try:
            response = requests.post(url, files=files)
            if response.status_code == 200:
                prediction = response.json()
                st.markdown('### R√©sultats de la pr√©diction :', unsafe_allow_html=True)
                st.markdown(f"**Marque de voiture pr√©dite :** {prediction['class']}", unsafe_allow_html=True)
                st.markdown(f"**Confiance dans la pr√©diction :** {prediction['confidence']:.2f}%", unsafe_allow_html=True)
            elif response.status_code == 400:
                st.error("La demande a √©chou√© : les donn√©es envoy√©es sont incorrectes. V√©rifiez l'image soumise.")
            elif response.status_code == 500:
                st.error("Erreur interne du serveur. Veuillez r√©essayer plus tard ou contacter le support technique.")
            else:
                st.error(f"√âchec de la pr√©diction avec le statut HTTP : {response.status_code}. Veuillez r√©essayer.")
        except requests.exceptions.RequestException as e:
            st.error(f"Erreur de connexion avec le serveur : {str(e)}. Veuillez v√©rifier votre connexion r√©seau ou l'√©tat du serveur.")

# Onglet √Ä propos
with tabs[1]:
    st.subheader("√Ä propos de cette application")

    # Am√©lioration du style avec HTML
    st.markdown("""
    <style>
        .about-text {
            font-size:16px;
            line-height: 1.6;
        }
    </style>
    """, unsafe_allow_html=True)

    # Texte enrichi pour une meilleure compr√©hension et pr√©sentation
    st.markdown("""
    <div class="about-text">
        <p>Cette application d√©montre l'utilisation pratique des technologies de deep learning pour reconna√Ætre les marques de voitures √† partir de photographies. Elle est destin√©e √† aider les passionn√©s d'automobile ainsi que les professionnels du secteur √† identifier rapidement des mod√®les de voitures.</p>
        <p>Le moteur de pr√©diction repose sur un mod√®le de convolution neural network (CNN), entra√Æn√© sur une large base de donn√©es contenant des milliers d'images de voitures class√©es par marque et mod√®le. Ce mod√®le a √©t√© optimis√© pour offrir √† la fois pr√©cision et rapidit√©, fournissant des pr√©dictions en quelques secondes.</p>
        <p><strong>Comment utiliser cette application ?</strong><br>
        T√©l√©chargez une image de voiture via le menu de gauche, et le syst√®me analysera l'image pour pr√©dire la marque et le mod√®le du v√©hicule. Les r√©sultats incluront la marque pr√©dite ainsi qu'un indice de confiance associ√© √† cette pr√©diction.</p>
        <p>Ce projet a √©t√© d√©velopp√© en utilisant Python, avec Streamlit pour l'interface utilisateur et FastAPI pour g√©rer les requ√™tes backend. Les images sont trait√©es en temps r√©el, d√©montrant ainsi la capacit√© du mod√®le √† √™tre int√©gr√© dans des applications en ligne.</p>
    </div>
    """, unsafe_allow_html=True)

